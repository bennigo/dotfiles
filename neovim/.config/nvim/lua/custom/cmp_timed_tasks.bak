-- ~/.config/nvim/lua/custom/cmp_timed_tasks.lua
local M = {}

local function now_ts(fmt)
  return os.date(fmt or "%Y-%m-%d %H:%M")
end

local function add_minutes(mins)
  local t = os.time() + (mins * 60)
  return os.date("%Y-%m-%d %H:%M", t)
end

local function tomorrow_at(hour, min)
  local d = os.date("*t")
  local t = os.time({
    year = d.year,
    month = d.month,
    day = d.day,
    hour = hour or 9,
    min = min or 0,
    sec = 0,
  }) + 24 * 60 * 60
  return os.date("%Y-%m-%d %H:%M", t)
end

local allowed_fts = {
  markdown = true,
  md = true,
  text = true,
}

local function is_allowed_ft()
  local ft = vim.bo.filetype
  return allowed_fts[ft] == true
end

local function current_prefix(line)
  local word = line:match("(%S+)$") or ""
  return word
end

local function should_offer(prefix)
  prefix = (prefix or ""):lower()
  if prefix == "" then
    -- Show items on manual trigger (empty prefix)
    return true
  end
  return prefix:find("^tt") or prefix:find("^@") or prefix:find("^due") or prefix:find("^sched")
end

local function make_item(label, snippet_text, filter)
  local cmp = require("cmp")
  return {
    label = label,
    filterText = filter or label,
    sortText = filter or label,
    kind = cmp.lsp.CompletionItemKind.Snippet,
    insertText = snippet_text,
    insertTextFormat = cmp.lsp.InsertTextFormat.Snippet,
    documentation = "Insert a timestamped TODO line",
  }
end

local source = {}

function source.new()
  return setmetatable({}, { __index = source })
end

function source:get_debug_name()
  return "timed_tasks"
end

function source:is_available()
  return is_allowed_ft()
end

function source:get_keyword_pattern()
  return [[\k\+]]
end

function source:get_trigger_characters()
  return { "@", "#" }
end

function source:complete(params, callback)
  if not is_allowed_ft() then
    return callback()
  end

  local line = params.context.cursor_before_line or ""
  local prefix = current_prefix(line)
  if not should_offer(prefix) then
    return callback()
  end

  pcall(vim.schedule, function()
    vim.notify(string.format("[timed-tasks] source:complete ft=%s prefix='%s'", vim.bo.filetype, prefix))
  end)

  local items = {
    make_item("TODO now", string.format("- [ ] %s ${1:Task}", now_ts()), "tt"),
    make_item("TODO in 15m", string.format("- [ ] %s ${1:Task}", add_minutes(15)), "tt15"),
    make_item("TODO in 30m", string.format("- [ ] %s ${1:Task}", add_minutes(30)), "tt30"),
    make_item("TODO in 1h", string.format("- [ ] %s ${1:Task}", add_minutes(60)), "tt1h"),
    make_item("TODO tomorrow 09:00", string.format("- [ ] %s ${1:Task}", tomorrow_at(9, 0)), "ttt9"),
  }

  callback({ items = items, isIncomplete = false })
end

function source:resolve(completion_item, callback)
  callback(completion_item)
end

function source:execute(completion_item, callback)
  callback(completion_item)
end

M.new = source.new

return M
