---
# Credentials system setup - Integrates GPG, pass, and ansible-vault
# Prepares the credential system but doesn't configure sensitive data

- name: Install credential management tools
  apt:
    name:
      - pass
      - ansible
      - gpg
      - pinentry-curses
      - pinentry-gtk2
    state: present
    update_cache: yes
  tags: ["credentials", "packages"]

- name: Verify GPG is properly configured
  block:
    - name: Check if GPG key exists
      shell: gpg --list-secret-keys --keyid-format LONG
      register: gpg_keys
      become: no
      changed_when: false
      failed_when: false

    - name: Display GPG key status
      debug:
        msg: |
          GPG Configuration Status:
          {% if gpg_keys.rc == 0 and 'sec' in gpg_keys.stdout %}
          ‚úÖ GPG private key found
          {{ gpg_keys.stdout_lines | select('match', '.*sec.*') | list | first | default('No key details available') }}
          {% else %}
          ‚ö†Ô∏è  No GPG private key found - manual setup required
          {% endif %}
  tags: ["credentials", "gpg"]

- name: Check pass initialization status
  block:
    - name: Check if pass is initialized
      command: pass ls
      register: pass_status
      become: no
      changed_when: false
      failed_when: false

    - name: Display pass status
      debug:
        msg: |
          Pass Configuration Status:
          {% if pass_status.rc == 0 %}
          ‚úÖ Pass is initialized and working
          Entries found: {{ pass_status.stdout_lines | length }}
          {% else %}
          ‚ö†Ô∏è  Pass not initialized - manual setup required
          {% endif %}
  tags: ["credentials", "pass"]

- name: Deploy credential management scripts
  copy:
    src: "{{ playbook_dir }}/../system/scripts/{{ item }}"
    dest: "{{ directories.dotfiles }}/system/scripts/{{ item }}"
    mode: '0755'
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
  loop:
    - setup_vault.sh
    - ansible-vault-pass.sh
    - add-credentials.sh
    - commit-credentials.sh
    - copy_credentials.py
  become: no
  tags: ["credentials", "scripts"]

- name: Deploy credential system documentation
  copy:
    src: "{{ playbook_dir }}/../system/{{ item }}"
    dest: "{{ directories.dotfiles }}/system/{{ item }}"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
  loop:
    - credentials.md
    - emergency-recovery.md
    - gpg-pass-tutorial.md
    - password-memory-strategy.md
    - gpg_backup_strategies.md
    - add-credentials-procedure.md
  become: no
  tags: ["credentials", "docs"]

- name: Set up credential system directory structure
  file:
    path: "{{ directories.dotfiles }}/system/{{ item }}"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  loop:
    - scripts
    - backups
  become: no
  tags: ["credentials", "dirs"]

- name: Deploy existing credentials.vault if present
  copy:
    src: "{{ playbook_dir }}/../system/credentials.vault"
    dest: "{{ directories.dotfiles }}/system/credentials.vault"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0600'
  become: no
  when: ansible_stat is undefined or ansible_stat.stat.exists
  ignore_errors: yes
  tags: ["credentials", "vault"]

- name: Create GPG configuration directory
  file:
    path: "{{ target_home }}/.gnupg"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0700'
  become: no
  tags: ["credentials", "gpg"]

- name: Configure GPG agent for better terminal integration
  copy:
    content: |
      # GPG Agent configuration
      pinentry-program /usr/bin/pinentry-curses
      default-cache-ttl 7200
      max-cache-ttl 7200
    dest: "{{ target_home }}/.gnupg/gpg-agent.conf"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0600'
  become: no
  notify: restart gpg-agent
  tags: ["credentials", "gpg"]

- name: Display credential system setup status
  debug:
    msg: |
      üîê CREDENTIAL SYSTEM SETUP STATUS
      
      ‚úÖ Tools installed: GPG, pass, ansible-vault
      ‚úÖ Scripts deployed to ~/.dotfiles/system/scripts/
      ‚úÖ Documentation deployed
      ‚úÖ Directory structure created
      
      {% if gpg_keys.rc == 0 and 'sec' in gpg_keys.stdout %}
      ‚úÖ GPG key found - system ready
      {% else %}
      ‚ö†Ô∏è  GPG key setup required
      {% endif %}
      
      {% if pass_status.rc == 0 %}
      ‚úÖ Pass initialized - system ready  
      {% else %}
      ‚ö†Ô∏è  Pass initialization required
      {% endif %}
      
      NEXT STEPS FOR MANUAL CREDENTIAL SETUP:
      1. cd ~/.dotfiles/system
      2. ./scripts/setup_vault.sh (if GPG key exists)
      3. python3 scripts/copy_credentials.py
      4. Follow credentials.md for complete setup
      
      The credential system is PREPARED but not CONFIGURED.
      This keeps sensitive setup separate from automated bootstrap.

- name: Create credential setup reminder
  copy:
    content: |
      # Credential System Setup Reminder
      
      The bootstrap has PREPARED your credential system but not configured it.
      This keeps sensitive credential setup separate from the automated bootstrap.
      
      ## If you have an existing GPG key:
      ```bash
      cd ~/.dotfiles/system
      ./scripts/setup_vault.sh
      python3 scripts/copy_credentials.py  
      # Follow the prompts to encrypt credentials
      ```
      
      ## If you need to create a new GPG key:
      ```bash
      gpg --full-generate-key
      # Follow prompts (Ed25519, 2-5 year expiration, strong passphrase)
      pass init <YOUR-GPG-KEY-ID>
      cd ~/.dotfiles/system  
      ./scripts/setup_vault.sh
      ```
      
      See credentials.md for complete documentation.
      See emergency-recovery.md for lockout prevention.
    dest: "{{ target_home }}/CREDENTIAL_SETUP_REQUIRED.md"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0600'
  become: no
  tags: ["credentials", "reminder"]