---
# Development environment setup
# Installs languages, runtimes, and development tools from install.txt

- name: Install development packages
  apt:
    name: "{{ development_packages }}"
    state: present
    update_cache: yes
  tags: ["development", "packages"]

- name: Get Python3 version
  shell: python3 --version | grep -oP '\d+\.\d+'
  register: python_version
  changed_when: false

- name: Install additional development tools  
  apt:
    name:
      - cmake
      - ninja-build
      - gettext
      - unzip
      - tmux
      - clangd
      - xclip
      - xsel
      - chafa
      - libssl-dev
      - libvips-dev
      - libsixel-dev
      - libchafa-dev
      - libtbb-dev
      - extra-cmake-modules
      - libsqlite3-dev
      - sqlite3
      - markdown
      - build-essential
      - libreadline-dev
      - lua5.4
      - luarocks
      - python3-venv
      - "python{{ python_version.stdout }}-venv"
      - lynx
    state: present
  tags: ["development", "packages", "extended"]

- name: Install Go language
  block:
    - name: Download Go
      get_url:
        url: "https://go.dev/dl/go1.24.5.linux-amd64.tar.gz"
        dest: "/tmp/go1.24.5.linux-amd64.tar.gz"
        mode: '0644'

    - name: Remove existing Go installation
      file:
        path: /usr/local/go
        state: absent

    - name: Extract Go
      unarchive:
        src: "/tmp/go1.24.5.linux-amd64.tar.gz"
        dest: /usr/local
        remote_src: yes
        owner: root
        group: root

    - name: Install clipse via Go
      command: /usr/local/go/bin/go install github.com/savedra1/clipse@v1.1.0
      become: no
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
        GOPATH: "{{ target_home }}/go"
  tags: ["development", "go"]

- name: Install Rust toolchain
  block:
    - name: Download Rust installer
      get_url:
        url: "https://sh.rustup.rs"
        dest: "/tmp/rustup-init.sh"
        mode: '0755'

    - name: Install Rust
      command: /tmp/rustup-init.sh -y --default-toolchain stable
      become: no
      args:
        creates: "{{ target_home }}/.cargo/bin/rustc"

    - name: Install Rust tools
      command: "{{ target_home }}/.cargo/bin/cargo install {{ item }}"
      loop:
        - eza
        - bat
        - ripgrep --features pcre2
        - zoxide
        - fd-find
        - viu
      become: no
      ignore_errors: yes  # Some may already exist
  tags: ["development", "rust"]

- name: Install Node.js via FNM
  block:
    - name: Download and install fnm
      shell: curl -fsSL https://fnm.vercel.app/install | bash
      become: no
      args:
        creates: "{{ target_home }}/.local/share/fnm"
    - name: Install latest Node.js
      shell: |
        export PATH="{{ target_home }}/.local/share/fnm:$PATH"
        eval "$(fnm env --use-on-cd)"
        fnm install --lts
        fnm default lts-latest
      become: no
      args:
        creates: "{{ target_home }}/.local/share/fnm/node-versions"
    - name: Configure npm to use local directory for global packages
      shell: |
        export PATH="{{ target_home }}/.local/share/fnm:$PATH"
        eval "$(fnm env --use-on-cd)"
        npm config set prefix "{{ target_home }}/.local/share/npm-global"
        mkdir -p "{{ target_home }}/.local/share/npm-global"
      become: no
    - name: Install Node.js packages
      shell: |
        export PATH="{{ target_home }}/.local/share/fnm:$PATH"
        eval "$(fnm env --use-on-cd)"
        npm install --global {{ item }}
      loop:
        - tree-sitter-cli
        - neovim
        - markdownlint-cli2
        - prettier
        - "@mermaid-js/mermaid-cli"
        - markdownlint-cli
        - markdown-toc
        - "@anthropic-ai/claude-code"
      become: no
      ignore_errors: yes
  tags: ["development", "nodejs"]

- name: Configure Claude Code API key
  block:
    - name: Extract Claude API key from vault
      shell: |
        if [ -f "{{ directories.dotfiles }}/system/credentials.vault" ]; then
          ansible-vault view --vault-password-file "{{ directories.dotfiles }}/system/scripts/ansible-vault-pass.sh" "{{ directories.dotfiles }}/system/credentials.vault" | grep -A1 "claude_api_key:" | tail -n1 | sed 's/^[[:space:]]*//' | tr -d '"'
        fi
      register: claude_api_key_result
      become: no
      failed_when: false
      no_log: true
      tags: ["development", "claude", "credentials"]

    - name: Set up Claude Code API key
      copy:
        content: |
          {
            "api_key": "{{ claude_api_key_result.stdout | trim }}"
          }
        dest: "{{ target_home }}/.config/claude-code/config.json"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
      become: no
      when:
        - claude_api_key_result.stdout is defined
        - claude_api_key_result.stdout | trim | length > 0
      tags: ["development", "claude", "credentials"]

    - name: Create Claude Code config directory if needed
      file:
        path: "{{ target_home }}/.config/claude-code"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0700'
      become: no
      tags: ["development", "claude"]
  tags: ["development", "claude"]

- name: Install Deno (JavaScript/TypeScript runtime)
  block:
    - name: Download and install Deno
      shell: curl -fsSL https://deno.land/install.sh | sh
      become: no
      args:
        creates: "{{ target_home }}/.deno/bin/deno"

    - name: Add Deno to PATH in zsh exports
      lineinfile:
        path: "{{ target_home }}/.config/zsh/exports.zsh"
        line: 'export PATH="$HOME/.deno/bin:$PATH"'
        regexp: '^export PATH="\$HOME/\.deno/bin:\$PATH"'
        create: yes
        backup: yes
      become: no

    - name: Verify Deno installation
      shell: "{{ target_home }}/.deno/bin/deno --version"
      register: deno_version_check
      become: no
      failed_when: false

    - name: Display Deno installation results
      debug:
        msg: |
          Deno installation: {{ 'SUCCESS' if deno_version_check.rc == 0 else 'FAILED' }}
          {% if deno_version_check.rc == 0 %}
          Version: {{ deno_version_check.stdout_lines[0] }}
          Location: {{ target_home }}/.deno/bin/deno
          Note: Restart shell or run 'source ~/.config/zsh/exports.zsh' to use deno
          {% else %}
          Error: {{ deno_version_check.stderr | default('Installation failed') }}
          {% endif %}
  tags: ["development", "javascript", "deno"]

- name: Install Python tools
  block:
    - name: Install uv (Python package manager)
      shell: curl -LsSf https://astral.sh/uv/install.sh | sh
      become: no
      args:
        creates: "{{ target_home }}/.cargo/bin/uv"
    - name: Install pipx
      pip:
        name: pipx
        extra_args: "--break-system-packages --user"
      become: no
    - name: Install pipx packages
      shell: |
        export PATH="{{ target_home }}/.local/bin:$PATH"
        pipx install {{ item }}
      loop:
        - hatch
        - hatchling
        - sqlfluff
      become: no
      ignore_errors: yes
    - name: Install pynvim
      pip:
        name: pynvim
        extra_args: "--break-system-packages --user --upgrade"
      become: no
  tags: ["development", "python"]

- name: Install Mamba (fast conda package manager)
  block:
    - name: Download Miniforge installer
      get_url:
        url: "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
        dest: "/tmp/miniforge-installer.sh"
        mode: '0755'
        timeout: 60

    - name: Install Miniforge
      shell: |
        /tmp/miniforge-installer.sh -b -p {{ target_home }}/.miniforge
      become: no
      args:
        creates: "{{ target_home }}/.miniforge"

    - name: Initialize Mamba for bash and zsh
      shell: |
        {{ target_home }}/.miniforge/bin/mamba init bash
        {{ target_home }}/.miniforge/bin/mamba init zsh
      become: no
      args:
        creates: "{{ target_home }}/.bashrc.bak"

    - name: Verify Mamba installation
      shell: "{{ target_home }}/.miniforge/bin/mamba --version"
      register: mamba_version_check
      become: no
      failed_when: false

    - name: Display Mamba installation results
      debug:
        msg: |
          Mamba installation: {{ 'SUCCESS' if mamba_version_check.rc == 0 else 'FAILED' }}
          {% if mamba_version_check.rc == 0 %}
          Version: {{ mamba_version_check.stdout }}
          Location: {{ target_home }}/.miniforge
          Note: Restart shell or run 'source ~/.bashrc' to use mamba
          {% else %}
          Error: {{ mamba_version_check.stderr | default('Installation failed') }}
          {% endif %}

    - name: Clean up installer
      file:
        path: "/tmp/miniforge-installer.sh"
        state: absent
  tags: ["development", "python", "mamba"]

- name: Install R statistical computing environment
  block:
    - name: Install R base packages
      apt:
        name:
          - r-base
          - r-base-dev
          - libblas-dev
          - liblapack-dev
        state: present
        update_cache: yes
    - name: Create R user library directory
      file:
        path: "{{ target_home }}/R/x86_64-pc-linux-gnu-library/4.4"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      become: no
    - name: Install R languageserver package
      shell: |
        R --slave -e "install.packages('languageserver', repos='https://cran.rstudio.com/', lib='~/R/x86_64-pc-linux-gnu-library/4.4')"
      become: no
      args:
        creates: "{{ target_home }}/R/x86_64-pc-linux-gnu-library/4.4/languageserver"
      register: r_languageserver_install
      ignore_errors: yes
    - name: Display R installation results
      debug:
        msg: |
          R installation: {{ 'SUCCESS' if r_languageserver_install.rc == 0 else 'PARTIAL' }}
          {% if r_languageserver_install.rc != 0 %}
          Note: languageserver may still be installing - check with: R -e "library(languageserver)"
          {% endif %}
  tags: ["development", "r"]

- name: Install ImageMagick and LaTeX for Neovim
  apt:
    name:
      - imagemagick
      - texlive-full
      - texlive-lang-european
    state: present
    update_cache: yes
  tags: ["development", "neovim-deps"]

- name: Build and install Neovim from source
  block:
    - name: Remove any existing neovim package
      apt:
        name: neovim
        state: absent

    - name: Create build directory for Neovim
      file:
        path: "{{ target_home }}/Downloads/git"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      become: no

    - name: Clone Neovim repository
      git:
        repo: "https://github.com/neovim/neovim.git"
        dest: "{{ target_home }}/Downloads/git/neovim"
        version: stable
        force: no
        accept_hostkey: yes
      become: no
      register: neovim_clone_result

    - name: Build Neovim with RelWithDebInfo
      shell: |
        cd {{ target_home }}/Downloads/git/neovim
        make CMAKE_BUILD_TYPE=RelWithDebInfo
      become: no
      when: neovim_clone_result.changed or not ansible_check_mode
      register: neovim_build_result

    - name: Install Neovim system-wide
      shell: |
        cd {{ target_home }}/Downloads/git/neovim
        make install
      when: neovim_build_result.rc is defined and neovim_build_result.rc == 0

    - name: Verify Neovim installation
      shell: nvim --version
      register: neovim_version_check
      failed_when: false

    - name: Display Neovim installation results
      debug:
        msg: |
          Neovim installation: {{ 'SUCCESS' if neovim_version_check.rc == 0 else 'FAILED' }}
          {% if neovim_version_check.rc == 0 %}
          Version: {{ neovim_version_check.stdout_lines[0] }}
          {% else %}
          Error: {{ neovim_version_check.stderr | default('Build or installation failed') }}
          {% endif %}

    - name: Clean up Neovim build directory
      file:
        path: "{{ target_home }}/Downloads/git/neovim"
        state: absent
      become: no
      when: neovim_version_check.rc == 0
  tags: ["development", "neovim", "build"]

- name: Set up Obsidian vault
  block:
    - name: Create notes directory
      file:
        path: "{{ target_home }}/notes"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      become: no

    - name: Clone Obsidian vault repository
      git:
        repo: "git@github.com:bennigo/bgovault.git"
        dest: "{{ target_home }}/notes/bgovault"
        version: main
        force: no
        accept_hostkey: yes
      become: no
      register: vault_clone_result
      failed_when: false

    - name: Display vault clone results
      debug:
        msg: |
          Obsidian vault clone: {{ 'SUCCESS' if vault_clone_result.rc == 0 else 'FAILED' }}
          {% if vault_clone_result.rc != 0 %}
          Error: {{ vault_clone_result.msg | default('Unknown error') }}
          Note: SSH keys must be set up and GitHub access configured
          {% else %}
          Vault cloned to: {{ target_home }}/notes/bgovault
          {% endif %}

    - name: Set proper ownership for vault directory
      file:
        path: "{{ target_home }}/notes/bgovault"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        recurse: yes
      become: no
      when: vault_clone_result.rc == 0

    - name: Configure git settings for vault
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: local
        repo: "{{ target_home }}/notes/bgovault"
      loop:
        - { name: "user.name", value: "bgo" }
        - { name: "user.email", value: "bgo@vedur.is" }
        - { name: "pull.rebase", value: "false" }
        - { name: "init.defaultBranch", value: "main" }
      become: no
      when: vault_clone_result.rc == 0
  tags: ["development", "obsidian", "notes"]

- name: Deploy mermaid-multi script for diagram processing
  copy:
    src: mermaid-multi
    dest: "{{ target_home }}/.local/bin/mermaid-multi"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  become: no
  tags: ["development", "mermaid", "scripts"]

- name: Deploy dotfiles-sync script for intelligent repository synchronization
  copy:
    src: dotfiles-sync
    dest: "{{ target_home }}/.local/bin/dotfiles-sync"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  become: no
  tags: ["development", "dotfiles", "scripts", "sync"]

- name: Set up Claude private configuration repository
  block:
    - name: Check if claude-private submodule exists
      stat:
        path: "{{ directories.dotfiles }}/claude-private/.git"
      register: claude_private_exists

    - name: Initialize claude-private git submodule (if exists)
      shell: |
        cd {{ directories.dotfiles }}
        git submodule update --init --recursive claude-private
      when: claude_private_exists.stat.exists
      become: no
      ignore_errors: yes

    - name: Unlock git-crypt in claude-private
      shell: |
        cd {{ directories.dotfiles }}/claude-private
        git-crypt unlock
      when: claude_private_exists.stat.exists
      become: no
      ignore_errors: yes
      register: claude_crypt_unlock

    - name: Deploy claude-private configs with stow
      shell: |
        cd {{ directories.dotfiles }}/claude-private
        stow --target={{ target_home }} .
      when: claude_private_exists.stat.exists and claude_crypt_unlock.rc == 0
      become: no
      ignore_errors: yes

    - name: Create main CLAUDE.md if it doesn't exist
      copy:
        dest: "{{ target_home }}/CLAUDE.md"
        content: |
          # Global Claude Code Context

          This file provides top-level context for Claude Code when working in `{{ target_home }}`.

          ## Directory Structure & Context Overview

          For comprehensive home directory structure and detailed context mappings, see:
          - **Complete Documentation**: `~/.claude/HOME_DIRECTORY_OVERVIEW.md` (encrypted)

          ## Quick Context References

          ### System Configuration
          - **Main Dotfiles**: `.dotfiles/CLAUDE.md` - Sway desktop environment configuration
          - **System Setup**: `.dotfiles/system/CLAUDE.md` - Hardware and installation procedures

          ### Active Development Projects
          - **GPS Library Ecosystem** (`work/projects/gps/gpslibrary_new/`):
            - `gps_parser/` - Configuration management for 173-station GNSS network
            - `receivers/` - Direct receiver communication and bulk downloads
            - `gtimes/` - GPS time processing and conversions
            - `tostools/` - GPS metadata quality control and TOS API integration

          ### Knowledge Management
          - **Obsidian Vault** (`notes/bgovault/`): Personal knowledge management with PARA organization

          ### Development Tools
          - **Claude Code Neovim Plugin**: `~/.local/share/nvim/lazy/claudecode.nvim/`
          - **Development Environment**: Multi-language setup (Python, Rust, Go, Node.js, R)

          ## Environment Summary

          - **OS**: Linux with Sway (Wayland compositor)
          - **Configuration Management**: GNU Stow with Ansible automation
          - **Security**: GPG-encrypted credentials, SSH key automation
          - **Development**: XDG-compliant, configuration-driven workflow

          ## Private Configuration

          This directory contains a private encrypted repository at `.dotfiles/claude-private/`:
          - **Encryption**: git-crypt with GPG key (requires unlock)
          - **Deployment**: Stow-managed to `~/.claude/`
          - **Contents**: Sensitive documentation and detailed context mappings

          ---

          **Created**: {{ ansible_date_time.date }}
          **Purpose**: Top-level context for Claude Code interactions
          **Private Details**: See `~/.claude/HOME_DIRECTORY_OVERVIEW.md`
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'
        force: no
      become: no

    - name: Display claude-private setup results
      debug:
        msg: |
          Claude private config setup: {{ 'SUCCESS' if claude_private_exists.stat.exists else 'SKIPPED (no submodule)' }}
          {% if claude_private_exists.stat.exists %}
          Git-crypt unlock: {{ 'SUCCESS' if claude_crypt_unlock.rc == 0 else 'FAILED (manual unlock needed)' }}
          Location: {{ directories.dotfiles }}/claude-private/
          Deployed to: {{ target_home }}/.claude/
          Note: Run 'git-crypt unlock' manually if unlock failed
          {% else %}
          Note: claude-private submodule not found - this is normal for fresh installs
          {% endif %}
  tags: ["development", "claude", "private-config"]
