---
# Development environment setup
# Installs languages, runtimes, and development tools from install.txt

- name: Install development packages
  apt:
    name: "{{ development_packages }}"
    state: present
    update_cache: yes
  tags: ["development", "packages"]

- name: Get Python3 version
  shell: python3 --version | grep -oP '\d+\.\d+'
  register: python_version
  changed_when: false

- name: Install additional development tools  
  apt:
    name:
      - cmake
      - ninja-build
      - gettext
      - unzip
      - tmux
      - clangd
      - xclip
      - xsel
      - chafa
      - libssl-dev
      - libvips-dev
      - libsixel-dev
      - libchafa-dev
      - libtbb-dev
      - extra-cmake-modules
      - libsqlite3-dev
      - sqlite3
      - markdown
      - build-essential
      - libreadline-dev
      - lua5.4
      - luarocks
      - python3-venv
      - "python{{ python_version.stdout }}-venv"
      - lynx
    state: present
  tags: ["development", "packages", "extended"]

- name: Install Go language
  block:
    - name: Download Go
      get_url:
        url: "https://go.dev/dl/go1.24.5.linux-amd64.tar.gz"
        dest: "/tmp/go1.24.5.linux-amd64.tar.gz"
        mode: '0644'

    - name: Remove existing Go installation
      file:
        path: /usr/local/go
        state: absent

    - name: Extract Go
      unarchive:
        src: "/tmp/go1.24.5.linux-amd64.tar.gz"
        dest: /usr/local
        remote_src: yes
        owner: root
        group: root

    - name: Install clipse via Go
      command: /usr/local/go/bin/go install github.com/savedra1/clipse@v1.1.0
      become: no
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"
        GOPATH: "{{ target_home }}/go"
  tags: ["development", "go"]

- name: Install Rust toolchain
  block:
    - name: Download Rust installer
      get_url:
        url: "https://sh.rustup.rs"
        dest: "/tmp/rustup-init.sh"
        mode: '0755'

    - name: Install Rust
      command: /tmp/rustup-init.sh -y --default-toolchain stable
      become: no
      args:
        creates: "{{ target_home }}/.cargo/bin/rustc"

    - name: Install Rust tools
      command: "{{ target_home }}/.cargo/bin/cargo install {{ item }}"
      loop:
        - eza
        - bat
        - ripgrep --features pcre2
        - zoxide
        - fd-find
        - viu
      become: no
      ignore_errors: yes  # Some may already exist
  tags: ["development", "rust"]

- name: Install Node.js via FNM
  block:
    - name: Download and install fnm
      shell: curl -fsSL https://fnm.vercel.app/install | bash
      become: no
      args:
        creates: "{{ target_home }}/.local/share/fnm"
    - name: Install latest Node.js
      shell: |
        export PATH="{{ target_home }}/.local/share/fnm:$PATH"
        eval "$(fnm env --use-on-cd)"
        fnm install --lts
        fnm default lts-latest
      become: no
      args:
        creates: "{{ target_home }}/.local/share/fnm/node-versions"
    - name: Configure npm to use local directory for global packages
      shell: |
        export PATH="{{ target_home }}/.local/share/fnm:$PATH"
        eval "$(fnm env --use-on-cd)"
        npm config set prefix "{{ target_home }}/.local/share/npm-global"
        mkdir -p "{{ target_home }}/.local/share/npm-global"
      become: no
    - name: Install Node.js packages
      shell: |
        export PATH="{{ target_home }}/.local/share/fnm:$PATH"
        eval "$(fnm env --use-on-cd)"
        npm install --global {{ item }}
      loop:
        - tree-sitter-cli
        - neovim
        - markdownlint-cli2
        - prettier
        - "@mermaid-js/mermaid-cli"
        - markdownlint-cli
        - markdown-toc
        - "@anthropic-ai/claude-code"
      become: no
      ignore_errors: yes
  tags: ["development", "nodejs"]

- name: Configure Claude Code API key
  block:
    - name: Extract Claude API key from vault
      shell: |
        if [ -f "{{ directories.dotfiles }}/system/credentials.vault" ]; then
          ansible-vault view --vault-password-file "{{ directories.dotfiles }}/system/scripts/ansible-vault-pass.sh" "{{ directories.dotfiles }}/system/credentials.vault" | grep -A1 "claude_api_key:" | tail -n1 | sed 's/^[[:space:]]*//' | tr -d '"'
        fi
      register: claude_api_key_result
      become: no
      failed_when: false
      no_log: true
      tags: ["development", "claude", "credentials"]

    - name: Set up Claude Code API key
      copy:
        content: |
          {
            "api_key": "{{ claude_api_key_result.stdout | trim }}"
          }
        dest: "{{ target_home }}/.config/claude-code/config.json"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
      become: no
      when:
        - claude_api_key_result.stdout is defined
        - claude_api_key_result.stdout | trim | length > 0
      tags: ["development", "claude", "credentials"]

    - name: Create Claude Code config directory if needed
      file:
        path: "{{ target_home }}/.config/claude-code"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0700'
      become: no
      tags: ["development", "claude"]
  tags: ["development", "claude"]

- name: Install Python tools
  block:
    - name: Install uv (Python package manager)
      shell: curl -LsSf https://astral.sh/uv/install.sh | sh
      become: no
      args:
        creates: "{{ target_home }}/.cargo/bin/uv"
    - name: Install pipx
      pip:
        name: pipx
        extra_args: "--break-system-packages --user"
      become: no
    - name: Install pipx packages
      shell: |
        export PATH="{{ target_home }}/.local/bin:$PATH"
        pipx install {{ item }}
      loop:
        - hatch
        - hatchling  
        - sqlfluff
      become: no
      ignore_errors: yes
    - name: Install pynvim
      pip:
        name: pynvim
        extra_args: "--break-system-packages --user --upgrade"
      become: no
  tags: ["development", "python"]
